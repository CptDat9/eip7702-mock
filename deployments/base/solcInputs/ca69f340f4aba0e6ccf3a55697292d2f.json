{
  "language": "Solidity",
  "sources": {
    "contracts/helper/MulticallHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.24;\r\ncontract MulticallHelper {\r\n    struct Call {\r\n        address to;\r\n        uint256 value;\r\n        bytes data;\r\n    }\r\n    function executeCall(Call[] calldata calls) external payable returns (bytes[] memory results) {\r\n        results = new bytes[](calls.length);\r\n        for(uint256 i = 0; i < calls.length; ++i){\r\n            (bool success, bytes memory returnData) = calls[i].to.call{value: calls[i].value}(calls[i].data);\r\n            if(!success){\r\n                assembly {\r\n                    revert(add(returnData, 32), mload(returnData))\r\n                }\r\n            }\r\n            results[i] = returnData;\r\n        }\r\n    }\r\n     // Helper functions\r\n    function getEthBalance(address addr) public view returns (uint256 balance) {\r\n        balance = addr.balance;\r\n    }\r\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\r\n        blockHash = blockhash(blockNumber);\r\n    }\r\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\r\n        blockHash = blockhash(block.number - 1);\r\n    }\r\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\r\n        timestamp = block.timestamp;\r\n    }\r\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\r\n        difficulty = block.prevrandao;\r\n    }\r\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\r\n        gaslimit = block.gaslimit;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}