{
  "language": "Solidity",
  "sources": {
    "contracts/SimpleCalibur.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.23;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract SimpleCalibur {\r\n    event DepositedWithApprove(\r\n        address indexed user,\r\n        address indexed token,\r\n        address indexed vault,\r\n        uint256 amount,\r\n        bytes vaultReturnData\r\n    );\r\n\r\n    /// @notice Batch approve + deposit in a single tx (no need for prior approve)\r\n    /// @param token ERC20 token (USDC)\r\n    /// @param vault Vault contract address\r\n    /// @param amount Amount of token to deposit\r\n    /// @param depositCalldata ABI-encoded calldata to call vault (ex: abi.encodeWithSignature(\"deposit(uint256,address)\", amount, user))\r\n    function depositWithApprove(\r\n        address token,\r\n        address vault,\r\n        uint256 amount,\r\n        bytes calldata depositCalldata\r\n    ) external payable {\r\n        require(amount > 0, \"amount=0\");\r\n        bool ok = IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n        require(ok, \"transferFrom failed\");\r\n        ok = IERC20(token).approve(vault, amount);\r\n        require(ok, \"approve failed\");\r\n        (bool success, bytes memory ret) = vault.call{value: 0}(depositCalldata);\r\n        require(success, getRevertMsg(ret));\r\n        uint256 leftover = IERC20(token).balanceOf(address(this));\r\n        if (leftover > 0) {\r\n            IERC20(token).transfer(msg.sender, leftover);\r\n        }\r\n        emit DepositedWithApprove(msg.sender, token, vault, amount, ret);\r\n    }\r\n\r\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\r\n        if (_returnData.length < 68) return \"vault call reverted\";\r\n        assembly {\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); \r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}